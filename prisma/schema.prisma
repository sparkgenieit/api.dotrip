// ───────────────────────────────────────────────────────────────────────────────
// DATASOURCE & GENERATOR
// ───────────────────────────────────────────────────────────────────────────────
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ───────────────────────────────────────────────────────────────────────────────
// ENUMS
// ───────────────────────────────────────────────────────────────────────────────
enum Role {
  RIDER
  VENDOR
  DRIVER
  ADMIN
  SUPPORT_AGENT
  SUPER_ADMIN
}

enum AddressType {
  HOME
  OFFICE
  OTHER
  PICKUP
  DROP
}

// ───────────────────────────────────────────────────────────────────────────────
// MODELS
// ───────────────────────────────────────────────────────────────────────────────

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  phone     String?
  role      Role     @default(RIDER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  vendorId  Int?

  bookings     Booking[]     @relation("UserBookings")
  trips        Trip[]        @relation("UserTrips")
  addressBooks AddressBook[] @relation("UserAddressBooks")

  vendor     Vendor?    @relation("VendorUsers", fields: [vendorId], references: [id])
  ownsVendor Vendor?    @relation("UserOwnsVendor")
  Driver     Driver[]   @relation("UserDrivers") // ✅ added relation name
  Feedback   Feedback[]
}

model Vendor {
  id         Int      @id @default(autoincrement())
  name       String
  companyReg String   @unique
  createdAt  DateTime @default(now())

  userId Int?  @unique
  vendor User? @relation("UserOwnsVendor", fields: [userId], references: [id])

  users    User[]     @relation("VendorUsers")
  drivers  Driver[]   @relation("VendorDrivers")
  vehicles Vehicle[]
  trips    Trip[]     @relation("VendorTrips")
  earnings Earnings[] @relation("VendorEarnings")

  @@map("vendors")
}

model Vehicle {
  id                 Int         @id @default(autoincrement())
  name               String
  model              String
  image              String
  capacity           Int
  registrationNumber String      @unique
  price              Int         @default(0)
  originalPrice      Int         @default(0)
  status             String      @default("available")
  comfortLevel       Int
  lastServicedDate   DateTime?
  vehicleTypeId      Int
  vehicleType        VehicleType @relation(fields: [vehicleTypeId], references: [id])
  driver             Driver?
  trips              Trip[]      @relation("VehicleTrips")
  vendor             Vendor?     @relation(fields: [vendorId], references: [id])
  vendorId           Int?
}

// ✅ Updated Prisma Schema for Driver model with new UI fields
model Driver {
  id                Int      @id @default(autoincrement())
  fullName          String
  phone             String
  email             String
  licenseNumber     String
  licenseExpiry     DateTime
  isPartTime        Boolean  @default(false)
  isAvailable       Boolean  @default(true)
  assignedVehicle   Vehicle? @relation(fields: [assignedVehicleId], references: [id])
  assignedVehicleId Int?     @unique // ✅ fix: unique constraint for 1:1 mapping
  vendorId          Int?
  vendor            Vendor?  @relation("VendorDrivers", fields: [vendorId], references: [id])

  userId Int?
  user   User? @relation("UserDrivers", fields: [userId], references: [id])
  trips Trip[]
  Feedback Feedback[]

}

model VehicleType {
  id                 Int       @id @default(autoincrement())
  name               String    @unique
  estimatedRatePerKm Float     @default(10.0) // ✅ Add rate per km
  baseFare           Float     @default(0.0) // ✅ Optional: add base fare
  vehicles           Vehicle[]
  bookings           Booking[]
}

model City {
  id           Int       @id @default(autoincrement())
  name         String
  state        String
  lat          Float? // ✅ Optional for geocoding fallback
  lng          Float?
  stopBookings Booking[] @relation("BookingStopCities")

  bookingsFrom Booking[] @relation("BookingFromCity")
  bookingsTo   Booking[] @relation("BookingToCity")

  // ✅ Distances (many-to-many directional)
  fromDistances CityDistance[] @relation("FromCity")
  toDistances   CityDistance[] @relation("ToCity")
}

model CityDistance {
  id           Int    @id @default(autoincrement())
  fromCityId   Int
  toCityId     Int
  distanceKm   Float
  // ✅ Add names for display/debug only
  fromCityName String
  toCityName   String

  fromCity City @relation("FromCity", fields: [fromCityId], references: [id])
  toCity   City @relation("ToCity", fields: [toCityId], references: [id])

  @@unique([fromCityId, toCityId]) // Ensure one direction stored
}

model TripType {
  id       Int       @id @default(autoincrement())
  label    String    @unique
  slug     String    @unique
  bookings Booking[]
}

model AddressBook {
  id             Int         @id @default(autoincrement())
  userId         Int
  type           AddressType
  address        String?
  city           String?
  pinCode        String?
  createdAt      DateTime    @default(now())
  user           User        @relation("UserAddressBooks", fields: [userId], references: [id])
  pickupBookings Booking[]   @relation("BookingPickupAddress")
  dropBookings   Booking[]   @relation("BookingDropAddress")

  @@unique([userId, type, address])
}

model Booking {
  id              Int      @id @default(autoincrement())
  userId          Int
  vehicleTypeId   Int
  pickupAddressId Int
  dropAddressId   Int
  pickupDateTime  DateTime
  fromCityId      Int
  toCityId        Int
  tripTypeId      Int
  fare            Float
  bookingType     String   @default("individual")
  status          String   @default("PENDING")
  createdAt       DateTime @default(now())

  user             User              @relation("UserBookings", fields: [userId], references: [id])
  vehicleType      VehicleType       @relation(fields: [vehicleTypeId], references: [id])
  pickupAddress    AddressBook       @relation("BookingPickupAddress", fields: [pickupAddressId], references: [id])
  dropAddress      AddressBook       @relation("BookingDropAddress", fields: [dropAddressId], references: [id])
  fromCity         City              @relation("BookingFromCity", fields: [fromCityId], references: [id])
  toCity           City              @relation("BookingToCity", fields: [toCityId], references: [id])
  trip             Trip?             @relation("BookingTrip")
  TripType         TripType          @relation(fields: [tripTypeId], references: [id])
  CorporateBooking CorporateBooking?

  // ✅ New: multi-city stop support
  stopCities City[] @relation("BookingStopCities")
}

model CorporateBooking {
  id                  Int      @id @default(autoincrement())
  bookingId           Int?     @unique
  companyName         String
  contactPerson       String
  contactEmail        String
  contactPhone        String
  numberOfVehicles    String
  estimatedPassengers String
  specialRequirements String?
  budgetRange         String?
  notes               String?
  status              String   @default("PENDING")
  createdAt           DateTime @default(now())

  booking Booking? @relation(fields: [bookingId], references: [id])
}

model Trip {
  id                 Int       @id @default(autoincrement())
  bookingId          Int       @unique
  riderId            Int
  driverId           Int
  vehicleId          Int
  vendorId           Int
  corporateBookingId Int?
  startTime          DateTime
  endTime            DateTime?
  status             String    @default("ONGOING")
  distance           Float?
  fare               Float?
  breakdownReported  Boolean   @default(false)
  breakdownNotes     String?
  createdAt          DateTime  @default(now())

  booking  Booking   @relation("BookingTrip", fields: [bookingId], references: [id])
  rider    User      @relation("UserTrips", fields: [riderId], references: [id])
  driver   Driver    @relation(fields: [driverId], references: [id])
  vehicle  Vehicle   @relation("VehicleTrips", fields: [vehicleId], references: [id])
  vendor   Vendor    @relation("VendorTrips", fields: [vendorId], references: [id])
  Feedback Feedback?
}

model Earnings {
  id        Int      @id @default(autoincrement())
  vendorId  Int
  amount    Float
  note      String?
  createdAt DateTime @default(now())

  vendor Vendor @relation("VendorEarnings", fields: [vendorId], references: [id])
}

model Feedback {
  id       Int @id @default(autoincrement())
  tripId   Int @unique
  riderId  Int
  driverId Int

  driverRating  Int
  vehicleRating Int
  serviceRating Int
  comment       String
  feedbackTime  DateTime @default(now())

  trip   Trip   @relation(fields: [tripId], references: [id])
  rider  User   @relation(fields: [riderId], references: [id])
  driver Driver @relation(fields: [driverId], references: [id])
}

// ───────────────────────────────────────────────────────────────────────────────
// DATASOURCE & GENERATOR
// ───────────────────────────────────────────────────────────────────────────────
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ───────────────────────────────────────────────────────────────────────────────
// ENUMS
// ───────────────────────────────────────────────────────────────────────────────
enum Role {
  RIDER
  VENDOR
  DRIVER
  ADMIN
  SUPPORT_AGENT
  SUPER_ADMIN
}

enum AddressType {
  HOME
  OFFICE
  OTHER
  PICKUP
  DROP
}

// ───────────────────────────────────────────────────────────────────────────────
// USER & RELATED
// ───────────────────────────────────────────────────────────────────────────────
model User {
  id           Int             @id @default(autoincrement())
  name         String
  email        String          @unique
  password     String
  phone        String?
  role         Role            @default(RIDER)
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt

  addressBooks AddressBook[]    @relation("UserAddressBooks")
  bookings     Booking[]        @relation("UserBookings")
  tickets      SupportTicket[]  @relation("UserTickets")
  vendor       Vendor?          @relation("VendorUsers", fields: [vendorId], references: [id])
  vendorId     Int?
  ownedVendor  Vendor?          @relation("UserOwnsVendor")
  Driver       Driver?          @relation("UserDriver")
  Trip         Trip[]           @relation("UserTrips")

  vehiclesAsVendor Vehicle[] @relation("VehicleVendor")
  vehiclesAsDriver Vehicle[] @relation("VehicleDriver")

  @@map("users")
}

// ───────────────────────────────────────────────────────────────────────────────
// ADDRESS BOOK
// ───────────────────────────────────────────────────────────────────────────────
model AddressBook {
  id           Int         @id @default(autoincrement())
  userId       Int
  type         AddressType
  address   String? 
  addressLine1 String?
  buildingName String?
  addressLine2 String?
  flatNo       String?
  city         String?
  state        String?
  phone        String?
  pinCode      String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @default(now())

  user User @relation("UserAddressBooks", fields: [userId], references: [id])

  @@map("address_books")
}

// ───────────────────────────────────────────────────────────────────────────────
// VEHICLES & BOOKINGS
// ───────────────────────────────────────────────────────────────────────────────
model Vehicle {
  id            Int       @id @default(autoincrement())
  name          String
  model         String
  image         String
  capacity      Int
  price         Int       @default(0)
  originalPrice Int       @default(0)
  registrationNumber String    @unique @default("")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now())

  vendor   User?  @relation("VehicleVendor", fields: [vendorId], references: [id])
  vendorId Int?

  driver   User?  @relation("VehicleDriver", fields: [driverId], references: [id])
  driverId Int?   @unique

  bookings Booking[] @relation("VehicleBookings")
  trips    Trip[]    @relation("VehicleTrips")

  @@map("vehicles")
}

// ───────────────────────────────────────────────────────────────────────────────
// REMAINING MODELS
// ───────────────────────────────────────────────────────────────────────────────

model City {
  id           Int       @id @default(autoincrement())
  name         String
  state        String
  fromBookings Booking[] @relation("BookingFromCity")
  toBookings   Booking[] @relation("BookingToCity")

  @@map("cities")
}

model TripType {
  id       Int       @id @default(autoincrement())
  label    String    @unique
  bookings Booking[] @relation("TripTypeBookings")

  @@map("trip_types")
}

model Booking {
  id             Int      @id @default(autoincrement())
  user           User     @relation("UserBookings",     fields: [userId],     references: [id])
  userId         Int
  vehicle        Vehicle  @relation("VehicleBookings",  fields: [vehicleId],  references: [id])
  vehicleId      Int
  fromCity       City     @relation("BookingFromCity",  fields: [fromCityId], references: [id])
  fromCityId     Int
  toCity         City     @relation("BookingToCity",    fields: [toCityId],   references: [id])
  toCityId       Int
  pickupAddressId  String
  dropAddressId    String
  pickupDateTime DateTime
  tripType       TripType @relation("TripTypeBookings", fields: [tripTypeId], references: [id])
  tripTypeId     Int
  fare           Float
  createdAt      DateTime @default(now())

  @@map("bookings")
}

model Vendor {
  id         Int       @id @default(autoincrement())
  name       String
  companyReg String
  createdAt  DateTime  @default(now())

  vendorId   Int       @unique
  vendor     User      @relation("UserOwnsVendor", fields: [vendorId], references: [id])

  users      User[]     @relation("VendorUsers")
  drivers    Driver[]   @relation("VendorDrivers")
  trips      Trip[]     @relation("VendorTrips")
  earnings   Earnings[] @relation("VendorEarnings")

  @@map("vendors")
}

model Driver {
  id        Int       @id @default(autoincrement())
  name      String
  license   String
  createdAt DateTime  @default(now())

  user      User      @relation("UserDriver",    fields: [userId],    references: [id])
  userId    Int       @unique


  vendor    Vendor?   @relation("VendorDrivers", fields: [vendorId], references: [id])
  vendorId  Int?

  trips    Trip[]     @relation("DriverTrips")
  earnings Earnings[] @relation("DriverEarnings")

  @@map("drivers")
}

model Trip {
  id        Int       @id @default(autoincrement())
  startTime DateTime
  endTime   DateTime?
  status    String
  distance  Float?
  fare      Float?
  createdAt DateTime  @default(now())

  rider     User     @relation("UserTrips",    fields: [riderId],   references: [id])
  riderId   Int
  driver    Driver?  @relation("DriverTrips",   fields: [driverId],  references: [id])
  driverId  Int?
  vehicle   Vehicle? @relation("VehicleTrips",  fields: [vehicleId], references: [id])
  vehicleId Int?
  vendor    Vendor?  @relation("VendorTrips",   fields: [vendorId],  references: [id])
  vendorId  Int?

  @@map("trips")
}

model SupportTicket {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  status      String   @default("OPEN")
  createdAt   DateTime @default(now())

  user   User @relation("UserTickets", fields: [userId], references: [id])
  userId Int

  @@map("support_tickets")
}

model Earnings {
  id        Int      @id @default(autoincrement())
  amount    Float
  date      DateTime @default(now())

  driver    Driver?  @relation("DriverEarnings", fields: [driverId], references: [id])
  driverId  Int?
  vendor    Vendor?  @relation("VendorEarnings", fields: [vendorId], references: [id])
  vendorId  Int?

  @@map("earnings")
}